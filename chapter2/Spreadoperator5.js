// ЁЯФ╣ рдХреНрдпрд╛ рд╣реИ Spread Operator (...) ?
// Spread operator (...) рддреАрди dots рд╣реЛрддреЗ рд╣реИрдВ рдЬреЛ рдХрд┐рд╕реА array, object рдпрд╛ iterable рдХреЛ рдЙрд╕рдХреЗ individual elements рдореЗрдВ "рдлреИрд▓рд╛" рджреЗрддреЗ рд╣реИрдВред

// рдЗрд╕реЗ рд╣рд┐рдВрджреА рдореЗрдВ рдХрд╣реЗрдВ рддреЛ тАФ "array рдпрд╛ object рдХреЛ рдЦреЛрд▓рдирд╛ / рдлреИрд▓рд╛рдирд╛"

// тЬЕ 1. Arrays рдореЗрдВ рдкреНрд░рдпреЛрдЧ
// ЁЯФ╕ a) рдПрдХ array рдХреЛ рджреВрд╕рд░реЗ рдореЗрдВ рдЬреЛрдбрд╝рдирд╛:

let a = [1, 2, 3];
let b = [4, 5];
let combined = [...a, ...b];
console.log(combined);  // [1, 2, 3, 4, 5]
// ЁЯФ╕ b) Array рдХреА рдХреЙрдкреА рдмрдирд╛рдирд╛:

let original = [10, 20, 30];
let copy = [...original];
console.log(copy);  // [10, 20, 30]
// ЁЯФБ рдпреЗ shallow copy рдмрдирд╛рддрд╛ рд╣реИред

// тЬЕ 2. Objects рдореЗрдВ рдкреНрд░рдпреЛрдЧ

let obj1 = {a: 1, b: 2};
let obj2 = {...obj1, c: 3};
console.log(obj2);  // {a: 1, b: 2, c: 3}
// тЬЕ 3. Function рдореЗрдВ arguments рдкрд╛рд╕ рдХрд░рдирд╛

function sum(x, y, z) {
  return x + y + z;
}

let nums = [1, 2, 3];
console.log(sum(...nums));  // 6
// тЬЕ 4. Strings рдХреЛ рдлреИрд▓рд╛рдирд╛

let name = "Ravi";
let letters = [...name];
console.log(letters);  // ["R", "a", "v", "i"]
// ЁЯза рдзреНрдпрд╛рди рд░рдЦрдиреЗ рдпреЛрдЧреНрдп рдмрд╛рддреЗрдВ
// Spread operator рд╕рд┐рд░реНрдл iterable рдЪреАрдЬрд╝реЛрдВ рдкрд░ рд╣реА рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ (arrays, strings, sets рдЖрджрд┐)ред

// Object рдореЗрдВ рдЗрд╕реЗ shallow copy рдпрд╛ properties рдорд░реНрдЬ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред

// рдЗрд╕реЗ рдЕрдХреНрд╕рд░ React рдФрд░ functional programming рдореЗрдВ рдмрд╣реБрдд рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред