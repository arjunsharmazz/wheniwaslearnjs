// ЁЯУШ JavaScript Symbol - Theory and Examples

/*
ЁЯСитАНЁЯПл Symbol рдХреНрдпрд╛ рд╣реИ?
Symbol JavaScript рдХрд╛ рдПрдХ рдирдпрд╛ primitive data type рд╣реИ (introduced in ES6) рдЬрд┐рд╕рдХрд╛ рдЙрдкрдпреЛрдЧ unique identifiers рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред

ЁЯСЙ Syntax:
let sym = Symbol("description");

ЁЯза рдЦрд╛рд╕ рдмрд╛рдд:
рд╣рд░ Symbol рдпреВрдирд┐рдХ рд╣реЛрддрд╛ рд╣реИ, рдЪрд╛рд╣реЗ рдЙрд╕рдХрд╛ description рдПрдХ рдЬреИрд╕рд╛ рд╣реЛред
*/

// тЬЕ Example 1: Basic Symbol
let sym1 = Symbol("id");
let sym2 = Symbol("id");

console.log("1. Are sym1 and sym2 equal?", sym1 === sym2);  // false

// тЬЕ Example 2: Symbol in object
let user = {
  name: "Ravi",
  [sym1]: 101
};

console.log("\n2. Object with symbol as key:");
console.log(user);
console.log("Accessing symbol key value:", user[sym1]);

// тЬЕ Example 3: Symbol is not enumerable
console.log("\n3. Symbol not shown in for...in:");
for (let key in user) {
  console.log("Key:", key);  // 'name' only, not symbol
}

// тЬЕ Example 4: Use Symbol.for (global symbol registry)
let globalSym1 = Symbol.for("globalId");
let globalSym2 = Symbol.for("globalId");

console.log("\n4. Symbol.for creates shared symbols:");
console.log(globalSym1 === globalSym2);  // true

// тЬЕ Example 5: Symbol.keyFor
console.log("Symbol.keyFor(globalSym1):", Symbol.keyFor(globalSym1)); // globalId

/*
ЁЯОп Symbol рдХрд╛ рдЙрдкрдпреЛрдЧ:
- Object keys рдХреЛ hidden/private рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП
- Libraries рдореЗрдВ collision рд╕реЗ рдмрдЪрдиреЗ рдХреЗ рд▓рд┐рдП
- Advanced programming (e.g. custom iterators, meta programming)

ЁЯЫбя╕П Symbols are not accessible by regular loops like for...in or Object.keys().
*/

// ----------------------------------------------------
// ЁЯза PRACTICE QUESTIONS
// ----------------------------------------------------

/*
тЬЕ Q1: рдПрдХ Symbol рдмрдирд╛рдЗрдП рдЬрд┐рд╕рдХрд╛ description рд╣реЛ "token"
let token = Symbol("token");

тЬЕ Q2: рдПрдХ object рдореЗрдВ Symbol рдХреЛ key рдХреА рддрд░рд╣ use рдХреАрдЬрд┐рдП рдФрд░ рдЙрд╕рдореЗрдВ value assign рдХрд░реЗрдВ

тЬЕ Q3: Check рдХрд░реЗрдВ рдХрд┐ рджреЛ symbols (same description) рдПрдХ рдЬреИрд╕реЗ рд╣реИрдВ рдпрд╛ рдирд╣реАрдВ

тЬЕ Q4: рдПрдХ object рдмрдирд╛рдЗрдП рдЬрд┐рд╕рдореЗрдВ рдПрдХ string key рдФрд░ рдПрдХ symbol key рджреЛрдиреЛрдВ рд╣реЛрдВ тАФ рдлрд┐рд░ for...in рд╕реЗ loop рдХрд░реЗрдВ рдФрд░ рдмрддрд╛рдПрдВ рдХреНрдпрд╛ рджрд┐рдЦрддрд╛ рд╣реИ?

тЬЕ Q5: Symbol.for рдФрд░ Symbol.keyFor рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдПрдХ shared symbol рдмрдирд╛рдПрдБ рдФрд░ рдЙрд╕реЗ console рдореЗрдВ рджрд┐рдЦрд╛рдПрдБред
*/

/*
ЁЯОУ Summary:

- Symbol() тЖТ unique value рд╣рд░ рдмрд╛рд░
- Symbol.for() тЖТ global registry рд╕реЗ shared symbol
- symbol as object key тЖТ not enumerable
- Symbol.keyFor(sym) тЖТ shared symbol рдХреА key рдкрддрд╛ рдХрд░реЗрдВ
*/

