// ЁЯза 1. Stack Memory (рд╕реНрдЯреИрдХ рдореЗрдореЛрд░реА)
// ЁЯФ╖ рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдБ:
// Fast (рддреЗрдЬрд╝)

// Fixed-size memory allocation

// Automatically managed (LIFO - Last In First Out)

// Primitive data types рдХреЛ рд╕реНрдЯреЛрд░ рдХрд░рддрд╛ рд╣реИ:
// ЁЯСЙ string, number, boolean, null, undefined, symbol, bigint

// ЁЯФ╣ рдЙрджрд╛рд╣рд░рдг:
js
Copy
Edit
let name = "Aman";   // stored in stack
let age = 25;        // stored in stack
// рдпрд╣рд╛рдБ name рдФрд░ age рдЬреИрд╕реЗ primitive values рд╕реАрдзреЗ stack рдореЗрдВ рд╕реНрдЯреЛрд░ рд╣реЛрддреЗ рд╣реИрдВред

// ЁЯзй 2. Heap Memory (рд╣реАрдк рдореЗрдореЛрд░реА)
// ЁЯФ╖ рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдБ:
// Slower (рдзреАрдореА)

// Dynamically allocated memory

// Complex (reference) data types рдХреЛ рд╕реНрдЯреЛрд░ рдХрд░рддрд╛ рд╣реИ:
// ЁЯСЙ Object, Array, Function, etc.

// Garbage Collector рджреНрд╡рд╛рд░рд╛ manage рд╣реЛрддреА рд╣реИ

// ЁЯФ╣ рдЙрджрд╛рд╣рд░рдг:

let person = {
  name: "Aman",
  age: 25
};
// рдпрд╣рд╛рдБ:

// person рдирд╛рдо рдХрд╛ variable stack рдореЗрдВ рд╣реИ

// рд▓реЗрдХрд┐рди рдЙрд╕рдХрд╛ actual object heap memory рдореЗрдВ рд╣реИ

// stack рдореЗрдВ рд╕рд┐рд░реНрдл рдЙрд╕рдХрд╛ reference (address) рд╣реЛрддрд╛ рд╣реИ

// тЪая╕П Primitive vs Reference Example:

let x = 10;
let y = x;
y = 20;

console.log(x); // 10 (Primitive тЖТ copy рд╣реБрдЖ)

let obj1 = { value: 10 };
let obj2 = obj1;
obj2.value = 20;

console.log(obj1.value); // 20 (Reference тЖТ same object)
// ЁЯз╛ Summary Table:
// Feature	Stack	Heap
// Speed	Fast	Slower
// Memory Allocation	Static	Dynamic
// Stores	Primitive values	Reference types (objects, arrays)
// Access method	LIFO	Direct access via reference
// Managed by	JavaScript engine automatically	Garbage Collector