// üîπ 1. Primitive Data Types (‡§Æ‡•Ç‡§≤ ‡§°‡•á‡§ü‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞)
// ‡§Ø‡•á immutable (‡§Ö‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§®‡•Ä‡§Ø) ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§è‡§ï ‡§π‡•Ä ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç ‡§ï‡•ã ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§

// Data Type	Description (‡§µ‡§ø‡§µ‡§∞‡§£)	Example
// String	‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§°‡•á‡§ü‡§æ	"Hello"
// Number	‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§è‡§Å (integer, float ‡§¶‡•ã‡§®‡•ã‡§Ç)	42, 3.14
// BigInt	‡§¨‡§π‡•Å‡§§ ‡§¨‡§°‡§º‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§è‡§Å (ES2020 ‡§Æ‡•á‡§Ç ‡§Ü‡§Ø‡§æ)	123456789012345678901234567890n
// Boolean	‡§≤‡•â‡§ú‡§ø‡§ï‡§≤ ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç (true ‡§Ø‡§æ false)	true, false
// undefined	‡§ú‡§¨ ‡§µ‡•à‡§∞‡§ø‡§è‡§¨‡§≤ ‡§ï‡•ã ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä ‡§π‡•ã	let a;
// null	‡§ú‡§æ‡§®‡§¨‡•Ç‡§ù‡§ï‡§∞ "‡§ñ‡§æ‡§≤‡•Ä" ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•ã	let a = null;
// Symbol	‡§Ø‡•Ç‡§®‡§ø‡§ï ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç‡§ú‡§º ‡§ï‡•á ‡§≤‡§ø‡§è (ES6 ‡§Æ‡•á‡§Ç ‡§Ü‡§Ø‡§æ)	Symbol('id')

// üî∏ 2. Non-Primitive / Reference Data Types
// ‡§Ø‡•á objects ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§á‡§®‡§ï‡§æ ‡§°‡•á‡§ü‡§æ memory ‡§Æ‡•á‡§Ç reference ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§

// Data Type	Description (‡§µ‡§ø‡§µ‡§∞‡§£)	Example
// Object	key-value pair ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§°‡•á‡§ü‡§æ	{ name: "Ram", age: 25 }
// Array	Ordered list of values (object ‡§ï‡•Ä special type)	[1, 2, 3]
// Function	Executable code block (object ‡§ï‡§æ sub-type)	function() {}
// Date	‡§§‡§æ‡§∞‡•Ä‡§ñ‡§º ‡§î‡§∞ ‡§∏‡§Æ‡§Ø ‡§ï‡•á ‡§≤‡§ø‡§è built-in object	new Date()
// RegExp	Regular expressions ‡§ï‡•á ‡§≤‡§ø‡§è	/abc/


typeof "hello";     // "string"
typeof 42;          // "number"
typeof true;        // "boolean"
typeof undefined;   // "undefined"
typeof null;        // "object"   ‚ùó (JavaScript ‡§ï‡•Ä ‡§è‡§ï ‡§™‡•Å‡§∞‡§æ‡§®‡•Ä ‡§ó‡§≤‡§§‡•Ä)
typeof Symbol();    // "symbol"
typeof [];          // "object"
typeof {};          // "object"
typeof function () { } // "function"






// example of all datatypes








// üîπ 1. Primitive Data Types
// ‚úÖ String

let name = "Aman";
console.log(typeof name);  // "string"
// ‚úÖ Number

let age = 25;
let price = 99.99;
console.log(typeof age);   // "number"
// ‚úÖ BigInt(‡§¨‡§°‡§º‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ)

let bigNumber = 1234567890123456789012345678901234567890n;
console.log(typeof bigNumber);  // "bigint"
// ‚úÖ Boolean

let isLoggedIn = true;
console.log(typeof isLoggedIn);  // "boolean"
// ‚úÖ undefined

let score;
console.log(typeof score);  // "undefined"
// ‚úÖ null

let emptyValue = null;
console.log(typeof emptyValue);  // "object" ‚ùó (JavaScript bug)
// ‚úÖ Symbol

let id = Symbol("userID");
console.log(typeof id);  // "symbol"
// üî∏ 2. Non - Primitive(Reference) Data Types
// ‚úÖ Object

let person = {
    name: "Ravi",
    age: 30
};
console.log(typeof person);  // "object"
// ‚úÖ Array

let colors = ["red", "green", "blue"];
console.log(typeof colors);   // "object"
// ‚úÖ Function

function greet() {
    console.log("Hello!");
}
console.log(typeof greet);  // "function"
// ‚úÖ Date

let today = new Date();
console.log(typeof today);  // "object"
// ‚úÖ RegExp(Regular Expression)

let pattern = /[a-z]+/;
console.log(typeof pattern);  // "object"
// üéØ Summary Table
// Data Type	Example	typeof Output
// String	"hello"	"string"
// Number	42	"number"
// BigInt	123456789n	"bigint"
// Boolean	true	"boolean"
// undefined	let x;	"undefined"
// null	let y = null	"object" ‚ùó
// Symbol	Symbol("id")	"symbol"
// Object	{name: "Ali"}	"object"
// Array	[1, 2, 3]	"object"
// Function	function() {}	"function"
// Date	new Date()	"object"
// RegExp	/abc/	"object"